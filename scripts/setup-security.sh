#!/bin/bash

# Setup script for GitUpdate Project security
# This script installs and configures all security tools and hooks

set -e

# Carregar m√≥dulo de utilit√°rios de seguran√ßa
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../lib/security_utils.sh"

echo -e "${BLUE}üîß GitUpdate Project - Setup de Seguran√ßa${RESET}"
echo "=============================================="

# Check if we're in a git repository
if [ ! -d ".git" ]; then
    echo -e "${RED}‚ùå Este n√£o √© um reposit√≥rio Git. Execute: git init${RESET}"
    exit 1
fi

# 1. Install security tools
echo -e "\n${BLUE}1. üõ†Ô∏è Instalando ferramentas de seguran√ßa...${RESET}"
ensure_security_tools

# 2. Setup git hooks
echo -e "\n${BLUE}2. ü™ù Configurando Git hooks...${RESET}"

if [ -f "scripts/pre-commit-security.sh" ]; then
    # Create hooks directory if it doesn't exist
    mkdir -p .git/hooks
    
    # Create or update pre-commit hook
    if [ -f ".git/hooks/pre-commit" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Hook pre-commit j√° existe. Criando backup...${RESET}"
        cp .git/hooks/pre-commit .git/hooks/pre-commit.backup
    fi
    
    # Create new pre-commit hook
    ln -sf ../../scripts/pre-commit-security.sh .git/hooks/pre-commit
    chmod +x .git/hooks/pre-commit
    
    echo -e "${GREEN}‚úÖ Hook pre-commit configurado${RESET}"
else
    echo -e "${RED}‚ùå Script pre-commit-security.sh n√£o encontrado${RESET}"
    exit 1
fi

# 3. Verify configuration files
echo -e "\n${BLUE}3. üìã Verificando arquivos de configura√ß√£o...${RESET}"

MISSING_FILES=0

# Check .gitleaks.toml
if [ -f ".gitleaks.toml" ]; then
    echo -e "${GREEN}‚úÖ .gitleaks.toml presente${RESET}"
else
    echo -e "${RED}‚ùå .gitleaks.toml ausente${RESET}"
    MISSING_FILES=$((MISSING_FILES + 1))
fi

# Check .gitignore
if [ -f ".gitignore" ]; then
    echo -e "${GREEN}‚úÖ .gitignore presente${RESET}"
else
    echo -e "${RED}‚ùå .gitignore ausente${RESET}"
    MISSING_FILES=$((MISSING_FILES + 1))
fi

# Check security policy
if [ -f "SECURITY.md" ]; then
    echo -e "${GREEN}‚úÖ SECURITY.md presente${RESET}"
else
    echo -e "${RED}‚ùå SECURITY.md ausente${RESET}"
    MISSING_FILES=$((MISSING_FILES + 1))
fi

# Check GitHub workflow
if [ -f ".github/workflows/security-scan.yml" ]; then
    echo -e "${GREEN}‚úÖ Pipeline de seguran√ßa configurada${RESET}"
else
    echo -e "${RED}‚ùå Pipeline de seguran√ßa ausente${RESET}"
    MISSING_FILES=$((MISSING_FILES + 1))
fi

# 4. Test installation
echo -e "\n${BLUE}4. üß™ Testando instala√ß√£o...${RESET}"

echo -e "${YELLOW}Testando Gitleaks...${RESET}"
if command_exists gitleaks && gitleaks version >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Gitleaks funcionando${RESET}"
else
    echo -e "${RED}‚ùå Problema com Gitleaks${RESET}"
fi

echo -e "${YELLOW}Testando ShellCheck...${RESET}"
if command_exists shellcheck && shellcheck --version >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ ShellCheck funcionando${RESET}"
else
    echo -e "${RED}‚ùå Problema com ShellCheck${RESET}"
fi

echo -e "${YELLOW}Testando Semgrep...${RESET}"
if command_exists semgrep && semgrep --version >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Semgrep funcionando${RESET}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Semgrep n√£o dispon√≠vel (opcional)${RESET}"
fi

# 5. Run initial security scan
echo -e "\n${BLUE}5. üîç Executando scan inicial de seguran√ßa...${RESET}"

if [ -f "scripts/security-audit.sh" ]; then
    echo -e "${YELLOW}Executando auditoria de seguran√ßa...${RESET}"
    ./scripts/security-audit.sh || true
else
    echo -e "${YELLOW}‚ö†Ô∏è Script de auditoria n√£o encontrado${RESET}"
fi

# 6. Final summary
echo -e "\n${BLUE}üìä RESUMO DA INSTALA√á√ÉO${RESET}"
echo "=============================="

if [ $MISSING_FILES -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Todos os arquivos de configura√ß√£o est√£o presentes${RESET}"
else
    echo -e "${RED}‚ùå $MISSING_FILES arquivos de configura√ß√£o ausentes${RESET}"
fi

echo -e "\n${BLUE}üéØ PR√ìXIMOS PASSOS:${RESET}"
echo "1. Revise e customize os arquivos de configura√ß√£o conforme necess√°rio"
echo "2. Execute './scripts/security-audit.sh' regularmente"
echo "3. O hook pre-commit ir√° executar automaticamente em cada commit"
echo "4. Configure as vari√°veis de ambiente no GitHub para a pipeline CI/CD"

# Instructions for GitHub setup
echo -e "\n${BLUE}üîß CONFIGURA√á√ÉO DO GITHUB:${RESET}"
echo "1. Fa√ßa push dos arquivos para o GitHub"
echo "2. V√° em Settings > Security > Code security and analysis"
echo "3. Ative 'Dependency graph' e 'Dependabot alerts'"
echo "4. A pipeline de seguran√ßa executar√° automaticamente em push/PR"

if [ $MISSING_FILES -eq 0 ]; then
    echo -e "\n${GREEN}üéâ Setup de seguran√ßa conclu√≠do com sucesso!${RESET}"
    exit 0
else
    echo -e "\n${YELLOW}‚ö†Ô∏è Setup conclu√≠do com avisos. Verifique os arquivos ausentes.${RESET}"
    exit 1
fi
