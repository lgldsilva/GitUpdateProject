name: Build and Release Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

env:
  PROJECT_NAME: GitUpdateProject
  
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Project Artifacts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up build environment
      run: |
        echo "🚀 Setting up build environment..."
        sudo apt-get update
        sudo apt-get install -y zip tar gzip
        mkdir -p build/ dist/ artifacts/

    - name: Get version information
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date -u +%H:%M:%S)" >> $GITHUB_OUTPUT
        echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        
        echo "📝 Version: $VERSION"
        echo "📅 Build Date: $(date -u +%Y-%m-%d)"

    - name: Prepare source files
      run: |
        echo "📦 Preparing source files for distribution..."
        
        # Create the destination directory first
        mkdir -p build/$PROJECT_NAME
        
        # Use tar with excludes to copy files safely (avoiding recursive copy)
        tar --exclude="build" --exclude="dist" --exclude=".git" \
            --exclude="*.log" --exclude="REFACTORING_REPORT.md" \
            -cf - . | (cd build/$PROJECT_NAME && tar -xf -)
        
        # Remove additional development files
        cd build/$PROJECT_NAME/
        rm -rf .github/ 2>/dev/null || true
        rm -f .gitignore 2>/dev/null || true
        rm -f ./*.log 2>/dev/null || true
        rm -f REFACTORING_REPORT.md 2>/dev/null || true

    - name: Create version info file
      run: |
        cd build/$PROJECT_NAME/
        cat > VERSION.txt << 'VERSION_EOF'
        GitUpdateProject Release Information
        =====================================
        
        Project: GitUpdateProject
        Description: Automated Git repository update system with security pipeline
        
        Components:
        - Core update scripts (updateGit.sh, updateGit_v2.sh)
        - Modular library system (lib/)
        - Security tools integration (Gitleaks, Semgrep, ShellCheck)
        - Pre-commit hooks and CI/CD pipeline
        - Cross-platform compatibility (Linux, macOS)
        
        For installation instructions, see README.md
        VERSION_EOF
        
        echo "Version: ${{ steps.version.outputs.VERSION }}" >> VERSION.txt
        echo "Build Date: ${{ steps.version.outputs.BUILD_DATE }}" >> VERSION.txt
        echo "Commit SHA: ${{ steps.version.outputs.COMMIT_SHA }}" >> VERSION.txt

    - name: Create distribution packages
      run: |
        echo "📦 Creating distribution packages..."
        cd build/
        
        # Create ZIP archive
        echo "Creating ZIP archive..."
        zip -r "../dist/$PROJECT_NAME-${{ steps.version.outputs.VERSION }}.zip" $PROJECT_NAME/
        
        # Create TAR.GZ archive
        echo "Creating TAR.GZ archive..."
        tar -czf "../dist/$PROJECT_NAME-${{ steps.version.outputs.VERSION }}.tar.gz" $PROJECT_NAME/
        
        # Create TAR.XZ archive
        echo "Creating TAR.XZ archive..."
        tar -cJf "../dist/$PROJECT_NAME-${{ steps.version.outputs.VERSION }}.tar.xz" $PROJECT_NAME/
        
        echo "📋 Created distribution files:"
        ls -la ../dist/

    - name: Create checksums
      run: |
        echo "🔐 Generating checksums..."
        cd dist/
        
        # Generate checksums using proper glob syntax
        sha256sum ./*.zip ./*.tar.gz ./*.tar.xz > checksums.sha256
        md5sum ./*.zip ./*.tar.gz ./*.tar.xz > checksums.md5
        
        echo "📋 Checksums generated:"
        cat checksums.sha256

    - name: Create installation script
      run: |
        echo "📜 Creating installation script for this release..."
        cd dist/
        
        # Create a release-specific installer script
        echo '#!/bin/bash' > install.sh
        echo '# GitUpdateProject Release Installer' >> install.sh
        echo 'set -e' >> install.sh
        echo '' >> install.sh
        echo 'REPO_OWNER="lgldsilva"' >> install.sh
        echo 'REPO_NAME="GitUpdateProject"' >> install.sh
        echo "VERSION=\"${{ steps.version.outputs.VERSION }}\"" >> install.sh
        echo 'BASE_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/download/${VERSION}"' >> install.sh
        echo '' >> install.sh
        echo 'log() { echo -e "\033[32m[INFO]\033[0m $1"; }' >> install.sh  
        echo 'error() { echo -e "\033[31m[ERROR]\033[0m $1"; exit 1; }' >> install.sh
        echo '' >> install.sh
        echo 'echo "GitUpdateProject Installer - Version $VERSION"' >> install.sh
        echo 'echo "============================================="' >> install.sh
        echo '' >> install.sh
        echo '# Check dependencies' >> install.sh
        echo 'command -v curl >/dev/null || error "curl é necessário"' >> install.sh
        echo 'command -v tar >/dev/null || command -v unzip >/dev/null || error "tar ou unzip necessário"' >> install.sh  
        echo '' >> install.sh
        echo '# Download and install' >> install.sh
        echo 'TEMP_DIR="/tmp/gitupdate-$$"' >> install.sh
        echo 'mkdir -p "$TEMP_DIR" && cd "$TEMP_DIR"' >> install.sh
        echo '' >> install.sh
        echo '# Try tar.gz first, then zip' >> install.sh
        echo 'for format in tar.gz zip; do' >> install.sh
        echo '  filename="${REPO_NAME}-${VERSION}.${format}"' >> install.sh
        echo '  log "Tentando baixar: $filename"' >> install.sh
        echo '  if curl -L -f -o "$filename" "${BASE_URL}/$filename" 2>/dev/null; then' >> install.sh
        echo '    log "Download concluído: $filename"' >> install.sh
        echo '    if [[ "$format" == "tar.gz" ]]; then' >> install.sh
        echo '      tar -xzf "$filename"' >> install.sh  
        echo '    else' >> install.sh
        echo '      unzip -q "$filename"' >> install.sh
        echo '    fi' >> install.sh
        echo '    extracted_dir=$(find . -maxdepth 1 -type d -name "*${REPO_NAME}*" | head -1)' >> install.sh
        echo '    if [ -n "$extracted_dir" ]; then' >> install.sh
        echo '      sudo mkdir -p /opt/GitUpdateProject' >> install.sh
        echo '      sudo cp -r "$extracted_dir"/* /opt/GitUpdateProject/' >> install.sh
        echo '      sudo find /opt/GitUpdateProject -name "*.sh" -exec chmod +x {} \;' >> install.sh
        echo '      # Create wrapper script instead of direct symlink' >> install.sh
        echo '      sudo bash -c '\''cat > /usr/local/bin/updateGit << "WRAPPER_EOF"' >> install.sh
        echo '#!/bin/bash' >> install.sh
        echo '# GitUpdateProject Wrapper Script' >> install.sh
        echo 'exec /opt/GitUpdateProject/updateGit_v2.sh "$@"' >> install.sh
        echo 'WRAPPER_EOF'\''' >> install.sh
        echo '      sudo chmod +x /usr/local/bin/updateGit' >> install.sh
        echo '      # Verificar se a instalação funcionou' >> install.sh
        echo '      if /usr/local/bin/updateGit --help >/dev/null 2>&1; then' >> install.sh
        echo '        log "GitUpdateProject $VERSION instalado com sucesso!"' >> install.sh
        echo '        log "Use: updateGit [diretorio]"' >> install.sh
        echo '      else' >> install.sh
        echo '        error "Falha na verificação pós-instalação"' >> install.sh
        echo '      fi' >> install.sh
        echo '      cd / && rm -rf "$TEMP_DIR"' >> install.sh
        echo '      exit 0' >> install.sh
        echo '    fi' >> install.sh
        echo '  fi' >> install.sh
        echo 'done' >> install.sh
        echo '' >> install.sh
        echo 'error "Falha ao baixar. Verifique se a release $VERSION existe."' >> install.sh
        
        chmod +x install.sh
        echo "✅ Created release-specific installer for version ${{ steps.version.outputs.VERSION }}"

    - name: Create build info
      run: |
        echo "📊 Creating build information..."
        cat > artifacts/build-info.json << 'BUILD_EOF'
        {
          "project": "GitUpdateProject",
          "description": "Automated Git repository update system",
          "build_platform": "GitHub Actions",
          "components": {
            "core_scripts": ["updateGit.sh", "updateGit_v2.sh"],
            "library_modules": "lib/",
            "security_tools": ["gitleaks", "semgrep", "shellcheck"],
            "installation": "install.sh",
            "documentation": "README.md"
          }
        }
        BUILD_EOF
        
        # Add dynamic build info
        echo "  \"version\": \"${{ steps.version.outputs.VERSION }}\"," >> artifacts/build-info.json.tmp
        echo "  \"build_date\": \"${{ steps.version.outputs.BUILD_DATE }}\"," >> artifacts/build-info.json.tmp
        echo "  \"commit_sha\": \"${{ steps.version.outputs.COMMIT_SHA }}\"," >> artifacts/build-info.json.tmp
        
        # Copy distribution files to artifacts
        cp -r dist/* artifacts/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ steps.version.outputs.VERSION }}
        path: artifacts/
        retention-days: 90

    - name: Upload distribution archives
      uses: actions/upload-artifact@v4
      with:
        name: release-archives-${{ steps.version.outputs.VERSION }}
        path: |
          dist/*.zip
          dist/*.tar.gz
          dist/*.tar.xz
          dist/checksums.*
          dist/install.sh
        retention-days: 90

    - name: Build Summary
      if: always()
      run: |
        echo "## 📦 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Version | ${{ steps.version.outputs.VERSION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Date | ${{ steps.version.outputs.BUILD_DATE }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ steps.version.outputs.COMMIT_SHA }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ steps.version.outputs.BRANCH_NAME }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- ZIP Archive: $PROJECT_NAME-${{ steps.version.outputs.VERSION }}.zip" >> $GITHUB_STEP_SUMMARY
        echo "- TAR.GZ Archive: $PROJECT_NAME-${{ steps.version.outputs.VERSION }}.tar.gz" >> $GITHUB_STEP_SUMMARY  
        echo "- TAR.XZ Archive: $PROJECT_NAME-${{ steps.version.outputs.VERSION }}.tar.xz" >> $GITHUB_STEP_SUMMARY
        echo "- Installation Script: install.sh" >> $GITHUB_STEP_SUMMARY
        echo "- Checksums: SHA256 and MD5" >> $GITHUB_STEP_SUMMARY

  # Create GitHub Release for version tags
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    name: Create GitHub Release
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Get version from tag
      id: tag_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-archives-${{ steps.tag_version.outputs.VERSION }}
        path: release/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_version.outputs.VERSION }}
        name: GitUpdateProject ${{ steps.tag_version.outputs.VERSION }}
        body: |
          # GitUpdateProject ${{ steps.tag_version.outputs.VERSION }}
          
          ## 🚀 Features
          
          - Batch Git repository updates
          - Comprehensive security scanning  
          - Cross-platform compatibility
          - Modular architecture
          - Detailed logging and progress tracking
          
          ## 📦 Quick Installation
          
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_version.outputs.VERSION }}/install.sh
          chmod +x install.sh
          sudo ./install.sh
          ```
          
          ## 🔐 Verification
          
          ```bash
          sha256sum -c checksums.sha256
          ```
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
