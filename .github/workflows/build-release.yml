name: Build and Release Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  PROJECT_NAME: GitUpdateProject
  
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Project Artifacts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up build environment
      run: |
        echo "🚀 Setting up build environment..."
        sudo apt-get update
        sudo apt-get install -y zip tar gzip
        mkdir -p build/ dist/ artifacts/

    - name: Get version information
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(date -u +%Y-%m-%d)" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=$(date -u +%H:%M:%S)" >> $GITHUB_OUTPUT
        echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        
        echo "📝 Version: $VERSION"
        echo "📅 Build Date: $(date -u +%Y-%m-%d)"

    - name: Prepare source files
      run: |
        echo "📦 Preparing source files for distribution..."
        
        # Use tar with excludes to copy files safely (avoiding recursive copy)
        tar --exclude="build" --exclude="dist" --exclude=".git" \
            --exclude="*.log" --exclude="REFACTORING_REPORT.md" \
            -cf - . | (cd build/$PROJECT_NAME && tar -xf -)
        
        # Remove additional development files
        cd build/$PROJECT_NAME/
        rm -rf .github/ 2>/dev/null || true
        rm -f .gitignore 2>/dev/null || true
        rm -f ./*.log 2>/dev/null || true
        rm -f REFACTORING_REPORT.md 2>/dev/null || true

    - name: Create version info file
      run: |
        cd build/$PROJECT_NAME/
        cat > VERSION.txt << 'VERSION_EOF'
        GitUpdateProject Release Information
        =====================================
        
        Project: GitUpdateProject
        Description: Automated Git repository update system with security pipeline
        
        Components:
        - Core update scripts (updateGit.sh, updateGit_v2.sh)
        - Modular library system (lib/)
        - Security tools integration (Gitleaks, Semgrep, ShellCheck)
        - Pre-commit hooks and CI/CD pipeline
        - Cross-platform compatibility (Linux, macOS)
        
        For installation instructions, see README.md
        VERSION_EOF
        
        echo "Version: ${{ steps.version.outputs.VERSION }}" >> VERSION.txt
        echo "Build Date: ${{ steps.version.outputs.BUILD_DATE }}" >> VERSION.txt
        echo "Commit SHA: ${{ steps.version.outputs.COMMIT_SHA }}" >> VERSION.txt

    - name: Create distribution packages
      run: |
        echo "📦 Creating distribution packages..."
        cd build/
        
        # Create ZIP archive
        echo "Creating ZIP archive..."
        zip -r "../dist/$PROJECT_NAME-${{ steps.version.outputs.VERSION }}.zip" $PROJECT_NAME/
        
        # Create TAR.GZ archive
        echo "Creating TAR.GZ archive..."
        tar -czf "../dist/$PROJECT_NAME-${{ steps.version.outputs.VERSION }}.tar.gz" $PROJECT_NAME/
        
        # Create TAR.XZ archive
        echo "Creating TAR.XZ archive..."
        tar -cJf "../dist/$PROJECT_NAME-${{ steps.version.outputs.VERSION }}.tar.xz" $PROJECT_NAME/
        
        echo "📋 Created distribution files:"
        ls -la ../dist/

    - name: Create checksums
      run: |
        echo "🔐 Generating checksums..."
        cd dist/
        
        # Generate checksums using proper glob syntax
        sha256sum ./*.zip ./*.tar.gz ./*.tar.xz > checksums.sha256
        md5sum ./*.zip ./*.tar.gz ./*.tar.xz > checksums.md5
        
        echo "📋 Checksums generated:"
        cat checksums.sha256

    - name: Create installation script
      run: |
        echo "📜 Creating installation script..."
        cd dist/
        cat > install.sh << 'INSTALL_EOF'
        #!/bin/bash
        # GitUpdateProject - Quick Installation Script
        
        set -e
        
        PROJECT_NAME="GitUpdateProject"
        INSTALL_DIR="/opt/$PROJECT_NAME"
        BIN_DIR="/usr/local/bin"
        
        # Colors
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m'
        
        echo -e "${GREEN}🚀 GitUpdateProject Installation Script${NC}"
        echo "=================================================="
        
        # Check if running as root
        if [[ $EUID -eq 0 ]]; then
           echo -e "${YELLOW}⚠️  Running as root - installation will be system-wide${NC}"
           SUDO=""
        else
           echo -e "${YELLOW}🔒 Will use sudo for system installation${NC}"
           SUDO="sudo"
        fi
        
        # Detect archive type using safer approach
        ARCHIVE=""
        EXTRACT_CMD=""
        
        # Check for tar.gz files
        for file in "$PROJECT_NAME"*.tar.gz; do
            if [ -f "$file" ]; then
                ARCHIVE="$file"
                EXTRACT_CMD="tar -xzf"
                break
            fi
        done
        
        # Check for zip files if no tar.gz found
        if [ -z "$ARCHIVE" ]; then
            for file in "$PROJECT_NAME"*.zip; do
                if [ -f "$file" ]; then
                    ARCHIVE="$file"
                    EXTRACT_CMD="unzip"
                    break
                fi
            done
        fi
        
        if [ -z "$ARCHIVE" ]; then
            echo -e "${RED}❌ No suitable archive found!${NC}"
            exit 1
        fi
        
        echo -e "${GREEN}📦 Found archive: $ARCHIVE${NC}"
        
        # Extract archive
        echo -e "${GREEN}📂 Extracting archive...${NC}"
        $EXTRACT_CMD "$ARCHIVE"
        
        # Install
        echo -e "${GREEN}📁 Installing to $INSTALL_DIR...${NC}"
        $SUDO mkdir -p "$INSTALL_DIR"
        $SUDO cp -r $PROJECT_NAME/* "$INSTALL_DIR/"
        $SUDO chmod +x "$INSTALL_DIR"/*.sh
        
        # Create symlinks  
        echo -e "${GREEN}🔗 Creating system links...${NC}"
        $SUDO ln -sf "$INSTALL_DIR/updateGit_v2.sh" "$BIN_DIR/updateGit"
        
        echo -e "${GREEN}✅ Installation completed successfully!${NC}"
        echo ""
        echo -e "${YELLOW}📋 Usage:${NC}"
        echo "  updateGit [directory]     - Update repositories in directory"
        INSTALL_EOF
        
        chmod +x install.sh

    - name: Create build info
      run: |
        echo "📊 Creating build information..."
        cat > artifacts/build-info.json << 'BUILD_EOF'
        {
          "project": "GitUpdateProject",
          "description": "Automated Git repository update system",
          "build_platform": "GitHub Actions",
          "components": {
            "core_scripts": ["updateGit.sh", "updateGit_v2.sh"],
            "library_modules": "lib/",
            "security_tools": ["gitleaks", "semgrep", "shellcheck"],
            "installation": "install.sh",
            "documentation": "README.md"
          }
        }
        BUILD_EOF
        
        # Add dynamic build info
        echo "  \"version\": \"${{ steps.version.outputs.VERSION }}\"," >> artifacts/build-info.json.tmp
        echo "  \"build_date\": \"${{ steps.version.outputs.BUILD_DATE }}\"," >> artifacts/build-info.json.tmp
        echo "  \"commit_sha\": \"${{ steps.version.outputs.COMMIT_SHA }}\"," >> artifacts/build-info.json.tmp
        
        # Copy distribution files to artifacts
        cp -r dist/* artifacts/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ steps.version.outputs.VERSION }}
        path: artifacts/
        retention-days: 90

    - name: Upload distribution archives
      uses: actions/upload-artifact@v4
      with:
        name: release-archives-${{ steps.version.outputs.VERSION }}
        path: |
          dist/*.zip
          dist/*.tar.gz
          dist/*.tar.xz
          dist/checksums.*
          dist/install.sh
        retention-days: 90

    - name: Build Summary
      if: always()
      run: |
        echo "## 📦 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Version | ${{ steps.version.outputs.VERSION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Date | ${{ steps.version.outputs.BUILD_DATE }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ steps.version.outputs.COMMIT_SHA }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ steps.version.outputs.BRANCH_NAME }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- ZIP Archive: $PROJECT_NAME-${{ steps.version.outputs.VERSION }}.zip" >> $GITHUB_STEP_SUMMARY
        echo "- TAR.GZ Archive: $PROJECT_NAME-${{ steps.version.outputs.VERSION }}.tar.gz" >> $GITHUB_STEP_SUMMARY  
        echo "- TAR.XZ Archive: $PROJECT_NAME-${{ steps.version.outputs.VERSION }}.tar.xz" >> $GITHUB_STEP_SUMMARY
        echo "- Installation Script: install.sh" >> $GITHUB_STEP_SUMMARY
        echo "- Checksums: SHA256 and MD5" >> $GITHUB_STEP_SUMMARY

  # Create GitHub Release for version tags
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    name: Create GitHub Release
    
    steps:
    - name: Get version from tag
      id: tag_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-archives-${{ steps.tag_version.outputs.VERSION }}
        path: release/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_version.outputs.VERSION }}
        name: GitUpdateProject ${{ steps.tag_version.outputs.VERSION }}
        body: |
          # GitUpdateProject ${{ steps.tag_version.outputs.VERSION }}
          
          ## 🚀 Features
          
          - Batch Git repository updates
          - Comprehensive security scanning  
          - Cross-platform compatibility
          - Modular architecture
          - Detailed logging and progress tracking
          
          ## 📦 Quick Installation
          
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_version.outputs.VERSION }}/install.sh
          chmod +x install.sh
          sudo ./install.sh
          ```
          
          ## 🔐 Verification
          
          ```bash
          sha256sum -c checksums.sha256
          ```
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
